{
    "docs": [
        {
            "location": "/", 
            "text": "Ilorm index\n\n\nWelcome to the ilorm documentation!\n\n\nCome here to discover the [[api]]\n\n\nStart with ilorm\n\n\n\n\n[[Why a new ORM ?]]\n\n\n[[Ilorm vs Mongoose]]\n\n\n[[Ilorm vs Waterline]]\n\n\n[[Tuto - Start with ilorm]]\n\n\n[[Some exemples]]\n\n\n[[API]]rez\n\n\n\n\nAdvanced subject\n\n\n\n\n[[Create a plugin]]\n\n\n[[Create a connector]]\n\n\n[[Contribute]]\n\n\n[[Ilorm core architecture]]\n\n\n\n\nResources\n\n\nConnectors\n\n\n\n\n[[MongoDB connector]]\n\n\n[[PostgreSQL connector]]\n\n\n[[Redis connector]]\n\n\n\n\nPlugins\n\n\n\n\n[[SoftDelete]]\n\n\n[[Depreciation]]", 
            "title": "Home"
        }, 
        {
            "location": "/#ilorm-index", 
            "text": "Welcome to the ilorm documentation!  Come here to discover the [[api]]", 
            "title": "Ilorm index"
        }, 
        {
            "location": "/#start-with-ilorm", 
            "text": "[[Why a new ORM ?]]  [[Ilorm vs Mongoose]]  [[Ilorm vs Waterline]]  [[Tuto - Start with ilorm]]  [[Some exemples]]  [[API]]rez", 
            "title": "Start with ilorm"
        }, 
        {
            "location": "/#advanced-subject", 
            "text": "[[Create a plugin]]  [[Create a connector]]  [[Contribute]]  [[Ilorm core architecture]]", 
            "title": "Advanced subject"
        }, 
        {
            "location": "/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/#connectors", 
            "text": "[[MongoDB connector]]  [[PostgreSQL connector]]  [[Redis connector]]", 
            "title": "Connectors"
        }, 
        {
            "location": "/#plugins", 
            "text": "[[SoftDelete]]  [[Depreciation]]", 
            "title": "Plugins"
        }, 
        {
            "location": "/api_public/", 
            "text": "API Public\n\n\nIlorm\n\n\nMain package documentation.\n\nconst\n \nilorm\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\n\nExported class\n\n\nIlorm.Model\n\n\nSee Model\n\n\nconst\n \n{\n\u00a0\nModel\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\n\nIlorm.Query\n\n\nSee Query\n\n\nconst\n \n{\n\u00a0\nQuery\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\n\nIlorm.Schema\n\n\nSee Schema\n\n\nconst\n \n{\n\u00a0\nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\n\nExported functions\n\n\nIlorm.declareModel()\n\n\nIlorm.newModel()\n\n\nCreate a new Model class\n\nconst\n \n{\n \nnewModel\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nModel\n \n=\n \nnewModel\n({\n \nname\n,\n \nschema\n,\n \nconnector\n \n})\n\n\n\nReturn a class Model you can use in your project to create new data or query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString, Symbol\n\n\nSymbol('model')\n\n\nThe unique name of the model, could be use to \nreference\n object.\n\n\n\n\n\n\nschema\n\n\nSchema\n\n\nnone\n\n\nSpecify the schema associated with the given model.\n\n\n\n\n\n\nconnector\n\n\nConnector\n\n\nnone\n\n\nSpecify the connector to use with the given model\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nYou can extends the created Model to add specific behavior of your code.\n\nclass\n \nYourModel\n \nextends\n \nnewModel\n(\nconf\n)\n \n{}\n\n\n\n\nExample of extends Model\nclass\n \nUser\n \nextends\n \nnewModel\n(\nuserConf\n)\n \n{\n\n    \nstatic\n \nqueryMale\n()\n \n{\n\n        \nreturn\n \nsuper\n.\nquery\n()\n\n            \n.\ngender\n.\nis\n(\nM\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\nExample of newModel\nFull example of creating a UserModel\n\nconst\n \n{\n \nSchema\n,\n \nnewModel\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\nconst\n \nmongoConnector\n \n=\n \nrequire\n(\n./mongoConnector\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\nrequired\n(),\n\n\n});\n\n\n\nconst\n \nUserModel\n \n=\n \nnewModel\n({\n\n\n    \nname\n:\n \nusers\n,\n\n\n    \nschema\n:\n \nuserSchema\n,\n\n\n    \nconnector\n:\n \nmongoConnector\n,\n\n\n});\n\n\nIlorm.use()\n\n\nModel\n\n\n(static)\n Model.query()\n\n\nCreate a \nQuery\n instance targeting the current Model.\n\n\nconst\n \nquery\n \n=\n \nModel\n.\nquery\n();\n\n\n\nReturn a query instance linked with the current Model.\n\n\nExample of query\nUserModel is a Model with a numberField : \nweight\n.\n\nconst\n \nuser\n \n=\n \nasync\n \nUserModel\n.\nquery\n()\n\n\n    \n.\nweight\n.\nmin\n(\n80\n)\n\n    \n.\nfindOne\n();\n\n\n(static)\n(async)\n Model.getById()\n\n\nGet an instance of the model by it's Id.\n\nconst\n \nmodelInstance\n \n=\n \nawait\n \nModel\n.\ngetById\n(\nid\n);\n\n\n\nReturn the instance associated with the given id.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nMixing\n\n\n\n\nThe id of the instance to get.\n\n\n\n\n\n\n\n\n(async)\n Model.save()\n\n\nSave the current instance into the database.\n- If the instance exists, it will make an update with the updated field only.\n- If the instance does not exists. It will create the instance into the database.\n\n\nawait\n \nmodelInstance\n.\nsave\n();\n\n\n\n\n\n(async)\n Model.remove()\n\n\nRemove the current instance from the database.\n\n\nawait\n \nmodelInstance\n.\nremove\n();\n\n\n\n\n\nQuery\n\n\n(async)\n Query.findOne()\n\n\nExecute the query, and returns one element which match it.\n\n\nconst\n \ninstance\n \n=\n \nawait\n \nquery\n.\nfindOne\n();\n\n\n\nReturn one instance which match the query.\n\n\n(async)\n Query.find()\n\n\nExecute the query, and returns one array containing all elements which match the query.\n\n\nconst\n \narrayOfInstances\n \n=\n \nawait\n \nquery\n.\nfind\n();\n\n\n\nReturn all instance which match the query.\n\n\n(async)\n Query.stream()\n\n\nExecute the query, and returns the stream of all elements matching the query\n\n\nconst\n \nstreamOfInstances\n \n=\n \nawait\n \nquery\n.\nstream\n();\n\n\n\nReturn a stream containing all elements matching the query.\n\n\n(async)\n Query.count()\n\n\nExecute the query, and return how many item match the query.\n\n\nconst\n \nnumberOfInstance\n \n=\n \nawait\n \nquery\n.\ncount\n();\n\n\n\nReturn the number of instance which match the query.\n\n\n(async)\n Query.updateOne()\n\n\n(async)\n Query.update()\n\n\n(async)\n Query.removeOne()\n\n\n(async)\n Query.remove()\n\n\nSchema\n\n\nSchema define how your data are stored.\n\n\nExample of schema\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\nrequired\n(),\n\n\n});\n\n\nconstructor Schema()\n\n\nInstantiate a new schema object.\n\n\nnew\n \nSchema\n(\nschemaDefinition\n);\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschemaDefinition\n\n\nObject\n\n\nAn object ; \n{ key: SchemaField }\n where every key will be the name of the field in the model, and SchemaField the definition of the field.\n\n\n\n\n\n\n\n\n(static)\n Schema.boolean()\n\n\nFactory to create a \nBoolean\n.\n\nSchema\n.\nboolean\n()\n\n\n\n\nReturn a \nBoolean instance\n.\n\n\nExample of boolean\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\nrequired\n(),\n\n\n});\n\n\n(static)\n Schema.date()\n\n\nFactory to create a \nDate\n.\n\nSchema\n.\ndate\n()\n\n\n\n\nReturn a \nDate instance\n.\n\n\nExample of date\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\nrequired\n(),\n\n\n});\n\n\n(static)\n Schema.number()\n\n\nFactory to create a \nNumber\n.\n\nSchema\n.\nnumber\n()\n\n\n\n\nReturn a \nNumber instance\n.\n\n\nExample of number\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\nrequired\n(),\n\n\n});\n\n\n(static)\n Schema.reference()\n\n\nFactory to create a \nReference\n.\n\nSchema\n.\nreference\n(\nmodelName\n)\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelName\n\n\nString\n\n\nSpecify which model is linked with the given reference.\n\n\n\n\n\n\n\n\nReturn a \nReference instance\n.\n\n\nExample of reference\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n\n  \nfather\n:\n \nSchema\n.\nreference\n(\nusers\n),\n\n\n});\n\n\n(static)\n Schema.string()\n\n\nFactory to create a \nString\n.\n\nSchema\n.\nstring\n()\n\n\n\n\nReturn a \nString instance\n.\n\n\nExample of string\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\nrequired\n(),\n\n\n});\n\n\nSchemaField\n\n\nSchemaField is a class used to define the behavior of your fields. Every field type\nare children of the SchemaField class. The SchemaField class is an abstract class.\nYou can create your own custom field by inheritance with SchemaField.\n\n\nSchemaField.default()\n\n\nSpecify the default value of the field, if no value are provided.\n\nconst\n \nfield\n \n=\n \nnew\n \nSchemaField\n();\n\n\n\nfield\n.\ndefault\n(\nvalue\n);\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\n*\n\n\nDefine the default value of the field.\n\n\n\n\n\n\n\n\nExample of default\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\ndefault\n(\ntrue\n).\nrequired\n(),\n\n\n});\n\n\nSchemaField.required()\n\n\nSpecify the field as required. A required field is mandatory to be save.\nAn instance without mandatory field throw error.\n\nconst\n \nfield\n \n=\n \nnew\n \nSchemaField\n();\n\n\n\nfield\n.\nrequired\n(\nisRequired\n \n=\n \ntrue\n);\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nisRequired\n\n\nBoolean\n\n\ntrue\n\n\nDefine the field as required (or not).\n\n\n\n\n\n\n\n\nPer default, the field is always not required. By calling this method, without parameter\nyou change the required status.\n\n\nExample of required\nBasic example of what a schema \"user\" could look like :\n\nconst\n \n{\n \nSchema\n \n}\n \n=\n \nrequire\n(\nilorm\n);\n\n\n\nconst\n \nuserSchema\n \n=\n \nnew\n \nSchema\n({\n\n\n  \nfirstName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n\n  \nlastName\n:\n \nSchema\n.\nstring\n().\nrequired\n(),\n\n\n  \nbirthday\n:\n \nSchema\n.\ndate\n(),\n\n  \nweight\n:\n \nSchema\n.\nnumber\n(),\n\n\n  \nisLogged\n:\n \nSchema\n.\nboolean\n().\ndefault\n(\ntrue\n).\nrequired\n(),\n\n\n});\n\n\nSchemaField/Boolean\n\n\nDefine the field as boolean.\n\n\nSchemaField/Date\n\n\nDefine the field as date.\n\n\nSchemaField/Number\n\n\nDefine the field as number.\n\n\nSchemaField/Reference\n\n\nDefine the field as reference.\n\n\nSchemaField/String\n\n\nDefine the field as string.", 
            "title": "API"
        }, 
        {
            "location": "/api_public/#api-public", 
            "text": "", 
            "title": "API Public"
        }, 
        {
            "location": "/api_public/#ilorm", 
            "text": "Main package documentation. const   ilorm   =   require ( ilorm );", 
            "title": "Ilorm"
        }, 
        {
            "location": "/api_public/#exported-class", 
            "text": "", 
            "title": "Exported class"
        }, 
        {
            "location": "/api_public/#ilormmodel", 
            "text": "See Model  const   { \u00a0 Model   }   =   require ( ilorm );", 
            "title": "Ilorm.Model"
        }, 
        {
            "location": "/api_public/#ilormquery", 
            "text": "See Query  const   { \u00a0 Query   }   =   require ( ilorm );", 
            "title": "Ilorm.Query"
        }, 
        {
            "location": "/api_public/#ilormschema", 
            "text": "See Schema  const   { \u00a0 Schema   }   =   require ( ilorm );", 
            "title": "Ilorm.Schema"
        }, 
        {
            "location": "/api_public/#exported-functions", 
            "text": "", 
            "title": "Exported functions"
        }, 
        {
            "location": "/api_public/#ilormdeclaremodel", 
            "text": "", 
            "title": "Ilorm.declareModel()"
        }, 
        {
            "location": "/api_public/#ilormnewmodel", 
            "text": "Create a new Model class const   {   newModel   }   =   require ( ilorm );  const   Model   =   newModel ({   name ,   schema ,   connector   })  \nReturn a class Model you can use in your project to create new data or query.     Parameter  Type  Default  Description      name  String, Symbol  Symbol('model')  The unique name of the model, could be use to  reference  object.    schema  Schema  none  Specify the schema associated with the given model.    connector  Connector  none  Specify the connector to use with the given model      Tip  You can extends the created Model to add specific behavior of your code. class   YourModel   extends   newModel ( conf )   {}   Example of extends Model class   User   extends   newModel ( userConf )   { \n     static   queryMale ()   { \n         return   super . query () \n             . gender . is ( M ); \n     }  }    Example of newModel Full example of creating a UserModel const   {   Schema ,   newModel   }   =   require ( ilorm );  const   mongoConnector   =   require ( ./mongoConnector );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (), \n   birthday :   Schema . date (), \n   weight :   Schema . number (), \n   isLogged :   Schema . boolean (). required (),  });  const   UserModel   =   newModel ({       name :   users ,       schema :   userSchema ,       connector :   mongoConnector ,  });", 
            "title": "Ilorm.newModel()"
        }, 
        {
            "location": "/api_public/#ilormuse", 
            "text": "", 
            "title": "Ilorm.use()"
        }, 
        {
            "location": "/api_public/#model", 
            "text": "", 
            "title": "Model"
        }, 
        {
            "location": "/api_public/#static-modelquery", 
            "text": "Create a  Query  instance targeting the current Model.  const   query   =   Model . query ();  \nReturn a query instance linked with the current Model.  Example of query UserModel is a Model with a numberField :  weight . const   user   =   async   UserModel . query ()       . weight . min ( 80 ) \n     . findOne ();", 
            "title": "(static) Model.query()"
        }, 
        {
            "location": "/api_public/#staticasync-modelgetbyid", 
            "text": "Get an instance of the model by it's Id. const   modelInstance   =   await   Model . getById ( id );  \nReturn the instance associated with the given id.     Parameter  Type  Default  Description      id  Mixing   The id of the instance to get.", 
            "title": "(static)(async) Model.getById()"
        }, 
        {
            "location": "/api_public/#async-modelsave", 
            "text": "Save the current instance into the database.\n- If the instance exists, it will make an update with the updated field only.\n- If the instance does not exists. It will create the instance into the database.  await   modelInstance . save ();", 
            "title": "(async) Model.save()"
        }, 
        {
            "location": "/api_public/#async-modelremove", 
            "text": "Remove the current instance from the database.  await   modelInstance . remove ();", 
            "title": "(async) Model.remove()"
        }, 
        {
            "location": "/api_public/#query", 
            "text": "", 
            "title": "Query"
        }, 
        {
            "location": "/api_public/#async-queryfindone", 
            "text": "Execute the query, and returns one element which match it.  const   instance   =   await   query . findOne ();  \nReturn one instance which match the query.", 
            "title": "(async) Query.findOne()"
        }, 
        {
            "location": "/api_public/#async-queryfind", 
            "text": "Execute the query, and returns one array containing all elements which match the query.  const   arrayOfInstances   =   await   query . find ();  \nReturn all instance which match the query.", 
            "title": "(async) Query.find()"
        }, 
        {
            "location": "/api_public/#async-querystream", 
            "text": "Execute the query, and returns the stream of all elements matching the query  const   streamOfInstances   =   await   query . stream ();  \nReturn a stream containing all elements matching the query.", 
            "title": "(async) Query.stream()"
        }, 
        {
            "location": "/api_public/#async-querycount", 
            "text": "Execute the query, and return how many item match the query.  const   numberOfInstance   =   await   query . count ();  \nReturn the number of instance which match the query.", 
            "title": "(async) Query.count()"
        }, 
        {
            "location": "/api_public/#async-queryupdateone", 
            "text": "", 
            "title": "(async) Query.updateOne()"
        }, 
        {
            "location": "/api_public/#async-queryupdate", 
            "text": "", 
            "title": "(async) Query.update()"
        }, 
        {
            "location": "/api_public/#async-queryremoveone", 
            "text": "", 
            "title": "(async) Query.removeOne()"
        }, 
        {
            "location": "/api_public/#async-queryremove", 
            "text": "", 
            "title": "(async) Query.remove()"
        }, 
        {
            "location": "/api_public/#schema", 
            "text": "Schema define how your data are stored.  Example of schema Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (), \n   birthday :   Schema . date (), \n   weight :   Schema . number (), \n   isLogged :   Schema . boolean (). required (),  });", 
            "title": "Schema"
        }, 
        {
            "location": "/api_public/#constructor-schema", 
            "text": "Instantiate a new schema object.  new   Schema ( schemaDefinition );      Parameter  Type  Description      schemaDefinition  Object  An object ;  { key: SchemaField }  where every key will be the name of the field in the model, and SchemaField the definition of the field.", 
            "title": "constructor Schema()"
        }, 
        {
            "location": "/api_public/#static-schemaboolean", 
            "text": "Factory to create a  Boolean . Schema . boolean ()   Return a  Boolean instance .  Example of boolean Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (), \n   birthday :   Schema . date (), \n   weight :   Schema . number (),     isLogged :   Schema . boolean (). required (),  });", 
            "title": "(static) Schema.boolean()"
        }, 
        {
            "location": "/api_public/#static-schemadate", 
            "text": "Factory to create a  Date . Schema . date ()   Return a  Date instance .  Example of date Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (),     birthday :   Schema . date (),     weight :   Schema . number (), \n   isLogged :   Schema . boolean (). required (),  });", 
            "title": "(static) Schema.date()"
        }, 
        {
            "location": "/api_public/#static-schemanumber", 
            "text": "Factory to create a  Number . Schema . number ()   Return a  Number instance .  Example of number Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (), \n   birthday :   Schema . date (),     weight :   Schema . number (),     isLogged :   Schema . boolean (). required (),  });", 
            "title": "(static) Schema.number()"
        }, 
        {
            "location": "/api_public/#static-schemareference", 
            "text": "Factory to create a  Reference . Schema . reference ( modelName )      Parameter  Type  Description      modelName  String  Specify which model is linked with the given reference.     Return a  Reference instance .  Example of reference Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (),     father :   Schema . reference ( users ),  });", 
            "title": "(static) Schema.reference()"
        }, 
        {
            "location": "/api_public/#static-schemastring", 
            "text": "Factory to create a  String . Schema . string ()   Return a  String instance .  Example of string Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({     firstName :   Schema . string (). required (),     lastName :   Schema . string (). required (),     birthday :   Schema . date (), \n   weight :   Schema . number (), \n   isLogged :   Schema . boolean (). required (),  });", 
            "title": "(static) Schema.string()"
        }, 
        {
            "location": "/api_public/#schemafield", 
            "text": "SchemaField is a class used to define the behavior of your fields. Every field type\nare children of the SchemaField class. The SchemaField class is an abstract class.\nYou can create your own custom field by inheritance with SchemaField.", 
            "title": "SchemaField"
        }, 
        {
            "location": "/api_public/#schemafielddefault", 
            "text": "Specify the default value of the field, if no value are provided. const   field   =   new   SchemaField ();  field . default ( value );      Parameter  Type  Description      value  *  Define the default value of the field.     Example of default Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({ \n   firstName :   Schema . string (). required (), \n   lastName :   Schema . string (). required (), \n   birthday :   Schema . date (), \n   weight :   Schema . number (),     isLogged :   Schema . boolean (). default ( true ). required (),  });", 
            "title": "SchemaField.default()"
        }, 
        {
            "location": "/api_public/#schemafieldrequired", 
            "text": "Specify the field as required. A required field is mandatory to be save.\nAn instance without mandatory field throw error. const   field   =   new   SchemaField ();  field . required ( isRequired   =   true );      Parameter  Type  Default  Description      isRequired  Boolean  true  Define the field as required (or not).     Per default, the field is always not required. By calling this method, without parameter\nyou change the required status.  Example of required Basic example of what a schema \"user\" could look like : const   {   Schema   }   =   require ( ilorm );  const   userSchema   =   new   Schema ({     firstName :   Schema . string (). required (),     lastName :   Schema . string (). required (),     birthday :   Schema . date (), \n   weight :   Schema . number (),     isLogged :   Schema . boolean (). default ( true ). required (),  });", 
            "title": "SchemaField.required()"
        }, 
        {
            "location": "/api_public/#schemafieldboolean", 
            "text": "Define the field as boolean.", 
            "title": "SchemaField/Boolean"
        }, 
        {
            "location": "/api_public/#schemafielddate", 
            "text": "Define the field as date.", 
            "title": "SchemaField/Date"
        }, 
        {
            "location": "/api_public/#schemafieldnumber", 
            "text": "Define the field as number.", 
            "title": "SchemaField/Number"
        }, 
        {
            "location": "/api_public/#schemafieldreference", 
            "text": "Define the field as reference.", 
            "title": "SchemaField/Reference"
        }, 
        {
            "location": "/api_public/#schemafieldstring", 
            "text": "Define the field as string.", 
            "title": "SchemaField/String"
        }
    ]
}