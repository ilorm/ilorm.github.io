{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the ilorm documentation!\n\n\nCome here to discover the [[api]]\n\n\nStart with ilorm\n\n\n\n\n[[Why a new ORM ?]]\n\n\n[[Ilorm vs Mongoose]]\n\n\n[[Ilorm vs Waterline]]\n\n\n[[Tuto - Start with ilorm]]\n\n\n[[Some exemples]]\n\n\n[[API]]\n\n\n\n\nAdvanced subject\n\n\n\n\n[[Create a plugin]]\n\n\n[[Create a connector]]\n\n\n[[Contribute]]\n\n\n[[Ilorm core architecture]]\n\n\n\n\nResources\n\n\nConnectors\n\n\n\n\n[[MongoDB connector]]\n\n\n[[PostgreSQL connector]]\n\n\n[[Redis connector]]\n\n\n\n\nPlugins\n\n\n\n\n[[SoftDelete]]\n\n\n[[Depreciation]]", 
            "title": "Home"
        }, 
        {
            "location": "/#start-with-ilorm", 
            "text": "[[Why a new ORM ?]]  [[Ilorm vs Mongoose]]  [[Ilorm vs Waterline]]  [[Tuto - Start with ilorm]]  [[Some exemples]]  [[API]]", 
            "title": "Start with ilorm"
        }, 
        {
            "location": "/#advanced-subject", 
            "text": "[[Create a plugin]]  [[Create a connector]]  [[Contribute]]  [[Ilorm core architecture]]", 
            "title": "Advanced subject"
        }, 
        {
            "location": "/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/#connectors", 
            "text": "[[MongoDB connector]]  [[PostgreSQL connector]]  [[Redis connector]]", 
            "title": "Connectors"
        }, 
        {
            "location": "/#plugins", 
            "text": "[[SoftDelete]]  [[Depreciation]]", 
            "title": "Plugins"
        }, 
        {
            "location": "/api/", 
            "text": "Connector\n\n\nModel\n\n\nQuery\n\n\nSchema\n\n\nSchemaField\n\n\nTest\n\n\nWhy a new ORM ?\n\n\n\n\nUse newest feature of ECMAScript (modern javascript). \n\n\nUniversal database connector (MongoDB, SQL, Redis, REST, CSV...).  \n\n\nCould create powerful plugin using the \"class\" inheritance.\n\n\n\n\nFeatures\n\n\nInitialize\n\n\nSchema\n\n\nconst ilorm = require('ilorm');\nconst schema = ilorm.schema;\n\nconst schema = schema.new({\n  firstName: schema.String().required(),\n  lastName: schema.String().required(),\n  children: schema.Array(schema.reference('User'))\n  birthday: schema.Date(),\n  weight: schema.Number().min(5).max(500)\n});\n\n\n\n\n\nilorm.schema\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstatic\n new( schema )\n\n\nCreate a new ilorm schema.\n\n\n\n\n\n\nstatic\n string()\n\n\nInstantiate a SchemaField/String\n\n\n\n\n\n\nstatic\n number()\n\n\nInstantiate a SchemaField/Number\n\n\n\n\n\n\nstatic\n boolean()\n\n\nInstantiate a SchemaField/Boolean\n\n\n\n\n\n\nstatic\n date()\n\n\nInstantiate a SchemaField/Date\n\n\n\n\n\n\nstatic\n reference()\n\n\nInstantiate a SchemaField/Reference\n\n\n\n\n\n\n\n\nAll SchemaField\n\n\nAll SchemaField are children of the class SchemaField. This class contains this method :\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrequired()\n\n\nThe field is required for create an object (per default not required).\n\n\n\n\n\n\ndefault(\nvalue\n)\n\n\nSet a precise value for default (if you do not set a value at creation).\n\n\n\n\n\n\n\n\nSchemaField/Number\n\n\nRepresent a javascript number.\n\n\nSchemaField/String\n\n\nRepresent a javascript string.\n\n\nSchemaField/Boolean\n\n\nRepresent a javascript boolean.\n\n\nSchemaField/Date\n\n\nRepresent a javascript date.\n\n\nSchemaField/Reference\n\n\nRepresent a javascript reference to another instance.\n\n\nModels\n\n\nconst ilorm = require('ilorm');\nconst ilormMongo = require('ilorm-connector-mongo');\nconst model = require('ilorm').model;\n\nconst userSchema = require('./schema');\nconst userModel = model('User', userModel, ilormMongo({ db }));\n\nuserModel.query()\n  .firstName.is('Smith')\n  .findOne()\n  .then(user =\n {\n    user.weight = 30;\n    return user.save();\n  });\n\n\n\n\nilorm.model\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquery()\n\n\nInstantiate a Query targeting the current Model\n\n\n\n\n\n\n\n\nQuery\n\n\nFields\n\n\nIn a query, every field present in the schema could be use to build the query.\nThe \n[field]\n part in further documentation are every field declared in your specific schema.\n\n\nExemple of query\n\n\n// if your schema is something like this ;\nconst schema = ilorm.schema({\n  firstName: ilorm.String().required(),\n});\n\n// You could write query like this :\nconst user = await User.query()\n    .firstName.is('Smith')\n    .findOne();\n\n\n\n\nFilters\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[field]\n.is(value)\n\n\nCheck if the field is equal value\n\n\n\n\n\n\n[field]\n.isNot(value)\n\n\nCheck if the field is not equal with value\n\n\n\n\n\n\n[field]\n.isIn(arrayOfValue)\n\n\nCheck if the field value is one of the array value\n\n\n\n\n\n\n[field]\n.isNotIn(arrayOfValue)\n\n\nCheck if the field value is none of array value\n\n\n\n\n\n\n[field]\n.between(min, max)\n\n\nCheck if the value is between min and max (include)\n\n\n\n\n\n\n[field]\n.min(value)\n\n\nCheck if the value is equal or superior than the value\n\n\n\n\n\n\n[field]\n.max(value)\n\n\nCheck if the value is equal or inferior than the value\n\n\n\n\n\n\n[field]\n.linkedWith(value)\n\n\nCheck if the field (reference) is linked with another model, id, ...\n\n\n\n\n\n\n\n\nUpdate\n\n\nUsed for update or updateOne query only :\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[field]\n.set(\nvalue\n)\n\n\nSet the value of the field\n\n\n\n\n\n\n[field]\n.inc(\nvalue\n)\n\n\nIncremente the value of the field by the given value\n\n\n\n\n\n\n\n\nOperations\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfind()\n\n\nRun the query and return a promise with the result (array of instance).\n\n\n\n\n\n\nfindOne()\n\n\nRun the query and return a promise the result (instance).\n\n\n\n\n\n\ncount()\n\n\nCount the number of instance and return it.\n\n\n\n\n\n\nstream()\n\n\nRun the query with a stream context could be the best solution for big query.\n\n\n\n\n\n\nremove()\n\n\nRemove the instance which match the query.\n\n\n\n\n\n\nremoveOne()\n\n\nRemove only one instance which math the query.\n\n\n\n\n\n\nupdate()\n\n\nUsed to update many instance.\n\n\n\n\n\n\nupdateOne()\n\n\nUsed to update one instance.\n\n\n\n\n\n\n\n\nQuery.update\n\n\nuserModel.query()\n  .firstName.is('Smith')\n  .weight.set(30)\n  .update();\n\n\n\n\n\nQuery.stream\n\n\nuserModel.query()\n  .stream() //Return a standard stream\n  .pipe(otherStream);\n\n\n\n\n\nInstances\n\n\nInstances are returned after a loading (find, or stream). It's a specific item loaded from the database. You can create a new instance from the model :\n\n\nconst instance = new userModel();\ninstance.firstName = 'Thibauld';\ninstance.lastName = 'Smith';\ninstance.save();\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsave()\n\n\nSave the instance in the database (auto insert or update)\n\n\n\n\n\n\nremove()\n\n\nDelete the instance from the database", 
            "title": "Api"
        }, 
        {
            "location": "/api/#connector", 
            "text": "", 
            "title": "Connector"
        }, 
        {
            "location": "/api/#model", 
            "text": "", 
            "title": "Model"
        }, 
        {
            "location": "/api/#query", 
            "text": "", 
            "title": "Query"
        }, 
        {
            "location": "/api/#schema", 
            "text": "", 
            "title": "Schema"
        }, 
        {
            "location": "/api/#schemafield", 
            "text": "", 
            "title": "SchemaField"
        }, 
        {
            "location": "/api/#test", 
            "text": "", 
            "title": "Test"
        }, 
        {
            "location": "/api/#why-a-new-orm", 
            "text": "Use newest feature of ECMAScript (modern javascript).   Universal database connector (MongoDB, SQL, Redis, REST, CSV...).    Could create powerful plugin using the \"class\" inheritance.", 
            "title": "Why a new ORM ?"
        }, 
        {
            "location": "/api/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/api/#initialize", 
            "text": "", 
            "title": "Initialize"
        }, 
        {
            "location": "/api/#schema_1", 
            "text": "const ilorm = require('ilorm');\nconst schema = ilorm.schema;\n\nconst schema = schema.new({\n  firstName: schema.String().required(),\n  lastName: schema.String().required(),\n  children: schema.Array(schema.reference('User'))\n  birthday: schema.Date(),\n  weight: schema.Number().min(5).max(500)\n});", 
            "title": "Schema"
        }, 
        {
            "location": "/api/#ilormschema", 
            "text": "Function  Description      static  new( schema )  Create a new ilorm schema.    static  string()  Instantiate a SchemaField/String    static  number()  Instantiate a SchemaField/Number    static  boolean()  Instantiate a SchemaField/Boolean    static  date()  Instantiate a SchemaField/Date    static  reference()  Instantiate a SchemaField/Reference", 
            "title": "ilorm.schema"
        }, 
        {
            "location": "/api/#all-schemafield", 
            "text": "All SchemaField are children of the class SchemaField. This class contains this method :     Function  Description      required()  The field is required for create an object (per default not required).    default( value )  Set a precise value for default (if you do not set a value at creation).", 
            "title": "All SchemaField"
        }, 
        {
            "location": "/api/#schemafieldnumber", 
            "text": "Represent a javascript number.", 
            "title": "SchemaField/Number"
        }, 
        {
            "location": "/api/#schemafieldstring", 
            "text": "Represent a javascript string.", 
            "title": "SchemaField/String"
        }, 
        {
            "location": "/api/#schemafieldboolean", 
            "text": "Represent a javascript boolean.", 
            "title": "SchemaField/Boolean"
        }, 
        {
            "location": "/api/#schemafielddate", 
            "text": "Represent a javascript date.", 
            "title": "SchemaField/Date"
        }, 
        {
            "location": "/api/#schemafieldreference", 
            "text": "Represent a javascript reference to another instance.", 
            "title": "SchemaField/Reference"
        }, 
        {
            "location": "/api/#models", 
            "text": "const ilorm = require('ilorm');\nconst ilormMongo = require('ilorm-connector-mongo');\nconst model = require('ilorm').model;\n\nconst userSchema = require('./schema');\nconst userModel = model('User', userModel, ilormMongo({ db }));\n\nuserModel.query()\n  .firstName.is('Smith')\n  .findOne()\n  .then(user =  {\n    user.weight = 30;\n    return user.save();\n  });", 
            "title": "Models"
        }, 
        {
            "location": "/api/#ilormmodel", 
            "text": "Function  Description      query()  Instantiate a Query targeting the current Model", 
            "title": "ilorm.model"
        }, 
        {
            "location": "/api/#query_1", 
            "text": "", 
            "title": "Query"
        }, 
        {
            "location": "/api/#fields", 
            "text": "In a query, every field present in the schema could be use to build the query.\nThe  [field]  part in further documentation are every field declared in your specific schema.", 
            "title": "Fields"
        }, 
        {
            "location": "/api/#exemple-of-query", 
            "text": "// if your schema is something like this ;\nconst schema = ilorm.schema({\n  firstName: ilorm.String().required(),\n});\n\n// You could write query like this :\nconst user = await User.query()\n    .firstName.is('Smith')\n    .findOne();", 
            "title": "Exemple of query"
        }, 
        {
            "location": "/api/#filters", 
            "text": "Function  Description      [field] .is(value)  Check if the field is equal value    [field] .isNot(value)  Check if the field is not equal with value    [field] .isIn(arrayOfValue)  Check if the field value is one of the array value    [field] .isNotIn(arrayOfValue)  Check if the field value is none of array value    [field] .between(min, max)  Check if the value is between min and max (include)    [field] .min(value)  Check if the value is equal or superior than the value    [field] .max(value)  Check if the value is equal or inferior than the value    [field] .linkedWith(value)  Check if the field (reference) is linked with another model, id, ...", 
            "title": "Filters"
        }, 
        {
            "location": "/api/#update", 
            "text": "Used for update or updateOne query only :     Function  Description      [field] .set( value )  Set the value of the field    [field] .inc( value )  Incremente the value of the field by the given value", 
            "title": "Update"
        }, 
        {
            "location": "/api/#operations", 
            "text": "Function  Description      find()  Run the query and return a promise with the result (array of instance).    findOne()  Run the query and return a promise the result (instance).    count()  Count the number of instance and return it.    stream()  Run the query with a stream context could be the best solution for big query.    remove()  Remove the instance which match the query.    removeOne()  Remove only one instance which math the query.    update()  Used to update many instance.    updateOne()  Used to update one instance.", 
            "title": "Operations"
        }, 
        {
            "location": "/api/#queryupdate", 
            "text": "userModel.query()\n  .firstName.is('Smith')\n  .weight.set(30)\n  .update();", 
            "title": "Query.update"
        }, 
        {
            "location": "/api/#querystream", 
            "text": "userModel.query()\n  .stream() //Return a standard stream\n  .pipe(otherStream);", 
            "title": "Query.stream"
        }, 
        {
            "location": "/api/#instances", 
            "text": "Instances are returned after a loading (find, or stream). It's a specific item loaded from the database. You can create a new instance from the model :  const instance = new userModel();\ninstance.firstName = 'Thibauld';\ninstance.lastName = 'Smith';\ninstance.save();     Function  Description      save()  Save the instance in the database (auto insert or update)    remove()  Delete the instance from the database", 
            "title": "Instances"
        }
    ]
}